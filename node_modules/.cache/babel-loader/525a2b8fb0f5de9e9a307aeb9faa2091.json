{"ast":null,"code":"var _jsxFileName = \"/Users/marioferlito/Desktop/Progetti/buildspace-nft-course-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'ferlitomario99';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n  * Implement your connectWallet method here\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xE7e7b9667153BcA1E722c5d36FFe5CdAC429fA01\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`);\n        });\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '18rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"NFT-TOKEN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: \"Minta il tuo NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","myEpicNft","Button","Card","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","renderNotConnectedContainer","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","nftTxn","makeAnEpicNFT","wait","hash","width","twitterLogo"],"sources":["/Users/marioferlito/Desktop/Progetti/buildspace-nft-course-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nconst TWITTER_HANDLE = 'ferlitomario99';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\n\n\n\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n    \n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error);\n    }\n  }\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n      \n  const askContractToMintNft = async () => {\n  const CONTRACT_ADDRESS = \"0xE7e7b9667153BcA1E722c5d36FFe5CdAC429fA01\";\n  try {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n      connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n\tconsole.log(from, tokenId.toNumber())\n\talert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`)\n});\n\n\n      console.log(\"Going to pop wallet now to pay gas...\")\n      let nftTxn = await connectedContract.makeAnEpicNFT();\n\n      console.log(\"Mining...please wait.\")\n      await nftTxn.wait();\n      \n      console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error)\n  }\n};\n\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\" >\n          \n        <Card style={{ width: '18rem' }}>\n      <Card.Img variant=\"top\" src=\"\" />\n      <Card.Body>\n        <Card.Title>NFT-TOKEN</Card.Title>\n        <Card.Text>\n          Minta il tuo NFT \n        </Card.Text>\n      </Card.Body>\n    </Card>\n  \n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )\n          }\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}